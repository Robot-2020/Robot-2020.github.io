<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Youth Site</title>
    <link>https://robot-2020.github.io/posts/</link>
    <description>Recent content in Posts on Youth Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Aug 2023 20:56:06 +0800</lastBuildDate><atom:link href="https://robot-2020.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Post</title>
      <link>https://robot-2020.github.io/posts/my-first-post/</link>
      <pubDate>Sun, 06 Aug 2023 20:56:06 +0800</pubDate>
      
      <guid>https://robot-2020.github.io/posts/my-first-post/</guid>
      <description>序 此文章为JavaSE基础篇学习内容
一、介绍 1、Java白皮书 Java“白皮书”的关键术语：简单性、面向对象、分布式、健壮性、安全性、体系结构中立、可移植性、解释型、高性能、多线程、动态性
2、Java版本 Java版本：1.0、1.1、1.2、1.3、1.4、5.0（泛型类、“for each”、自动装箱、枚举、静态导入 ）、6、7、8（“函数式”编程）、 9（模板）
3、JDK JDK：Java Development Kit（Java开发工具包）：编写Java程序的程序员使用的软件。 JRE：Java Runtime Environment（Java运行时环境）：运行Java程序的用户使用的软件。 JDK是整个JAVA的核心，包括了Java运行环境JRE（Java Runtime Envirnment）、一堆Java开发工具（javac/java/jdb等）和Java基础的类库（即Java API 包）。 JVM(Java Virtual Machine)就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。 只有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib，而jre包含lib类库。在JDK下面的的jre目录里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。
总而言之，我们利用JDK（调用JAVA API）开发了属于我们自己的JAVA程序后，通过JDK中的编译程序（javac）将我们的文本java文件编译成JAVA字节码，在JRE上运行这些JAVA字节码，JVM解析这些字节码，映射到CPU指令集或OS的系统调用。
二、基础 1、类结构和main函数 一个.java文件只能有一个public class ClassName，且类名和文件名相同。可以有其他的类，但所有的代码都应该放在类内。
psvm的写法固定，只是一个启动函数，寄存在public class内。一个类文件最多只能有一个main函数，没有的就不能主动执行，可以被别人调用执行。
Java文件必须以.java命名。
2、基本类型和运算符 基本类型：boolean、byte、short/int/long、float/double、char
byte存储8位有符号整数，-128 ~ 127
int默认是32位
float是32位，赋值时必须带f
char是一个单一的16位Unicode字符（\u0000 ~ \uffff），char类型可以存储任何字符 char a = 97 -&amp;gt; &amp;lsquo;a&amp;rsquo;
3、选择和循环结构 if-else
switch-case
int a = 1; switch(a){ case 1: System.out.println(&amp;#34;1&amp;#34;); break; //满足后跳出case到default执行 case 2: System.out.println(&amp;#34;2&amp;#34;); break; case 3: System.</description>
    </item>
    
  </channel>
</rss>
